// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  employeeId    String?   @unique
  password      String
  role          Role      @default(TEAM_MEMBER)
  projectArea   String?
  bio           String?   @db.Text
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  
  // Relations
  teamLead      TeamLead?
  teamMember    TeamMember?
  application   Application?
  sessions      Session[]
}

model TeamLead {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    String
  teamMembers   TeamMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model TeamMember {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamLeadId    String?
  teamLead      TeamLead? @relation(fields: [teamLeadId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Application {
  id            String    @id @default(cuid())
  userId        String?   @unique
  user          User?     @relation(fields: [userId], references: [id])
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  resumeUrl     String
  projectArea   String
  experience    String    @db.Text
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Session {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

enum Role {
  ADMIN
  TEAM_LEAD
  TEAM_MEMBER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

